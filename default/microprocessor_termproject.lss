
microprocessor_termproject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000150  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000174  00000000  00000000  000001df  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000f7  00000000  00000000  00000353  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001bb  00000000  00000000  0000044a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000608  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000ee  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000d4  00000000  00000000  00000716  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  000007ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e5       	ldi	r30, 0x50	; 80
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  b6:	0c 94 a6 00 	jmp	0x14c	; 0x14c <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <main>:

// _delay_ms() 함수 등이 정의되어 있음
#include <util/delay.h>

// C 언어의 주 실행 함수
int main(void){
  be:	ef 92       	push	r14
  c0:	ff 92       	push	r15
  c2:	0f 93       	push	r16
  c4:	1f 93       	push	r17
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
	long j;

	// 포트 A의 방향 설정, 0 : 입력, 1 : 출력
	// PA7 PA6 PA5 PA4 PA3 PA2 PA1 PA0
	// Out Out Out Out Out Out Out Out
	DDRA = 0B11111111;
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	8a bb       	out	0x1a, r24	; 26

	// 포트 C의 방향 설정, 0 : 입력, 1 : 출력
	// PC7 PC6 PC5 PC4 PC3 PC2 PC1 PC0
	// Out Out Out Out Out Out Out Out
	DDRC = 0B11111111;
  ce:	84 bb       	out	0x14, r24	; 20

	// 포트 D의 방향 설정, 0 : 입력, 1 : 출력
	// PD7 PD6 PD5 PD4 PD3 PD2 PD1 PD0
	// Out Out Out Out Out Out Out Out
	DDRD = 0B11111111;
  d0:	81 bb       	out	0x11, r24	; 17
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	70 e0       	ldi	r23, 0x00	; 0
	// while 블록 안의 문장을 무한 반복
	while(1){
		// 오른쪽을 이동하는 반복
		for(i=0;i<22;i++){
			// j를 i만큼 쉬프트한다.
			j=0B00000000000000000000000000000111L<<i;
  d6:	87 e0       	ldi	r24, 0x07	; 7
  d8:	e8 2e       	mov	r14, r24
  da:	f1 2c       	mov	r15, r1
  dc:	01 2d       	mov	r16, r1
  de:	11 2d       	mov	r17, r1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  e0:	ce e6       	ldi	r28, 0x6E	; 110
  e2:	d1 e0       	ldi	r29, 0x01	; 1
  e4:	16 c0       	rjmp	.+44     	; 0x112 <main+0x54>
  e6:	d8 01       	movw	r26, r16
  e8:	c7 01       	movw	r24, r14
  ea:	06 2e       	mov	r0, r22
  ec:	04 c0       	rjmp	.+8      	; 0xf6 <main+0x38>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	aa 1f       	adc	r26, r26
  f4:	bb 1f       	adc	r27, r27
  f6:	0a 94       	dec	r0
  f8:	d2 f7       	brpl	.-12     	; 0xee <main+0x30>
			// 마스킹 하여 PORTA에 집어 넣는다.
			PORTA=j&0B00000000000000000000000011111111L;
  fa:	8b bb       	out	0x1b, r24	; 27
			// 마스킹 하여 PORTC에 집어 넣는다.
			PORTC=(j&0B00000000000000001111111100000000L)>>8;
  fc:	95 bb       	out	0x15, r25	; 21
			// 마스킹 하여 PORTD에 집어 넣는다.
			PORTD=(j&0B00000000111111110000000000000000L)>>16;
  fe:	a2 bb       	out	0x12, r26	; 18
 100:	80 e2       	ldi	r24, 0x20	; 32
 102:	9e e4       	ldi	r25, 0x4E	; 78
 104:	fe 01       	movw	r30, r28
 106:	31 97       	sbiw	r30, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <main+0x48>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 10a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 10c:	d9 f7       	brne	.-10     	; 0x104 <main+0x46>
	DDRD = 0B11111111;

	// while 블록 안의 문장을 무한 반복
	while(1){
		// 오른쪽을 이동하는 반복
		for(i=0;i<22;i++){
 10e:	6f 5f       	subi	r22, 0xFF	; 255
 110:	7f 4f       	sbci	r23, 0xFF	; 255
 112:	66 31       	cpi	r22, 0x16	; 22
 114:	71 05       	cpc	r23, r1
 116:	3c f3       	brlt	.-50     	; 0xe6 <main+0x28>
 118:	65 e1       	ldi	r22, 0x15	; 21
 11a:	70 e0       	ldi	r23, 0x00	; 0
			_delay_ms(2000);
		}
		// 왼쪽으로 이동하는 반복
		for(i=21;i>0;i--){
			// j를 i만큼 쉬프트한다.
			j=0B00000000000000000000000000000111L<<i;
 11c:	d8 01       	movw	r26, r16
 11e:	c7 01       	movw	r24, r14
 120:	06 2e       	mov	r0, r22
 122:	04 c0       	rjmp	.+8      	; 0x12c <main+0x6e>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	aa 1f       	adc	r26, r26
 12a:	bb 1f       	adc	r27, r27
 12c:	0a 94       	dec	r0
 12e:	d2 f7       	brpl	.-12     	; 0x124 <main+0x66>
			// 마스킹 하여 PORTA에 집어 넣는다.
			PORTA=j&0B00000000000000000000000011111111L;
 130:	8b bb       	out	0x1b, r24	; 27
			// 마스킹 하여 PORTC에 집어 넣는다.
			PORTC=(j&0B00000000000000001111111100000000L)>>8;
 132:	95 bb       	out	0x15, r25	; 21
			// 마스킹 하여 PORTD에 집어 넣는다.
			PORTD=(j&0B00000000111111110000000000000000L)>>16;
 134:	a2 bb       	out	0x12, r26	; 18
 136:	80 e2       	ldi	r24, 0x20	; 32
 138:	9e e4       	ldi	r25, 0x4E	; 78
 13a:	fe 01       	movw	r30, r28
 13c:	31 97       	sbiw	r30, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <main+0x7e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 140:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 142:	d9 f7       	brne	.-10     	; 0x13a <main+0x7c>
			PORTD=(j&0B00000000111111110000000000000000L)>>16;
			// 일정 시간만큼 딜레이 시킨다.
			_delay_ms(2000);
		}
		// 왼쪽으로 이동하는 반복
		for(i=21;i>0;i--){
 144:	61 50       	subi	r22, 0x01	; 1
 146:	70 40       	sbci	r23, 0x00	; 0
 148:	49 f7       	brne	.-46     	; 0x11c <main+0x5e>
 14a:	e3 cf       	rjmp	.-58     	; 0x112 <main+0x54>

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
